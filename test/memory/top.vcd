$version Generated by VerilatedVcd $end
$date Thu Dec 15 12:52:35 2022 $end
$timescale 1ps $end

 $scope module TOP $end
  $var wire 32 [ ALUResult_M [31:0] $end
  $var wire  1 S clk $end
  $var wire  1 Y lb $end
  $var wire  1 X lh $end
  $var wire  1 W lw $end
  $var wire 32 ] readData_M [31:0] $end
  $var wire  1 Z s $end
  $var wire  1 V sb $end
  $var wire  1 U sh $end
  $var wire  1 T sw $end
  $var wire 32 \ writeData_M [31:0] $end
  $scope module top_memory $end
   $var wire 32 [ ALUResult_M [31:0] $end
   $var wire 32 f WIDTH [31:0] $end
   $var wire  1 $ cache_hit $end
   $var wire 32 ` cache_in [31:0] $end
   $var wire 32 % cache_out [31:0] $end
   $var wire 32 a cache_store [31:0] $end
   $var wire  1 _ cache_wen $end
   $var wire  1 S clk $end
   $var wire  1 Y lb $end
   $var wire  1 X lh $end
   $var wire  1 ^ loadIns $end
   $var wire  1 W lw $end
   $var wire 32 ' memory_out [31:0] $end
   $var wire 32 & ram_out [31:0] $end
   $var wire 32 ] readData_M [31:0] $end
   $var wire  1 Z s $end
   $var wire  1 V sb $end
   $var wire  1 U sh $end
   $var wire  1 # storeIns $end
   $var wire  1 T sw $end
   $var wire 32 \ writeData_M [31:0] $end
   $scope module cache $end
    $var wire 32 i CACHE_DATA_WIDTH [31:0] $end
    $var wire 32 f DATA_WIDTH [31:0] $end
    $var wire 32 g SET_WIDTH [31:0] $end
    $var wire 32 h TAG_WIDTH [31:0] $end
    $var wire 32 [ addr [31:0] $end
    $var wire 57 ( cache_out [56:0] $end
    $var wire 57 3 cache_subarray[0] [56:0] $end
    $var wire 57 G cache_subarray[10] [56:0] $end
    $var wire 57 I cache_subarray[11] [56:0] $end
    $var wire 57 K cache_subarray[12] [56:0] $end
    $var wire 57 M cache_subarray[13] [56:0] $end
    $var wire 57 O cache_subarray[14] [56:0] $end
    $var wire 57 Q cache_subarray[15] [56:0] $end
    $var wire 57 5 cache_subarray[1] [56:0] $end
    $var wire 57 7 cache_subarray[2] [56:0] $end
    $var wire 57 9 cache_subarray[3] [56:0] $end
    $var wire 57 ; cache_subarray[4] [56:0] $end
    $var wire 57 = cache_subarray[5] [56:0] $end
    $var wire 57 ? cache_subarray[6] [56:0] $end
    $var wire 57 A cache_subarray[7] [56:0] $end
    $var wire 57 C cache_subarray[8] [56:0] $end
    $var wire 57 E cache_subarray[9] [56:0] $end
    $var wire  1 S clk $end
    $var wire 32 ` din [31:0] $end
    $var wire 32 % dout [31:0] $end
    $var wire  1 $ hit $end
    $var wire 24 + tag_out [23:0] $end
    $var wire  1 * valid $end
    $var wire  1 _ wen $end
   $upscope $end
   $scope module cache_store_input $end
    $var wire 32 f WIDTH [31:0] $end
    $var wire 32 [ addr [31:0] $end
    $var wire 32 % cache_out [31:0] $end
    $var wire 32 a cache_store [31:0] $end
    $var wire 32 \ din [31:0] $end
    $var wire  1 V sb $end
    $var wire  1 U sh $end
    $var wire  1 T sw $end
   $upscope $end
   $scope module hbw $end
    $var wire 32 k BYTE_LEN [31:0] $end
    $var wire 32 f CPU_WORD [31:0] $end
    $var wire 32 j HALF_LEN [31:0] $end
    $var wire  8 / b [7:0] $end
    $var wire 32 - be [31:0] $end
    $var wire 32 ' data [31:0] $end
    $var wire 32 ] dout [31:0] $end
    $var wire 16 . h [15:0] $end
    $var wire 32 , he [31:0] $end
    $var wire  1 Y lb $end
    $var wire  1 X lh $end
    $var wire  1 W lw $end
    $var wire  2 l offset [1:0] $end
    $var wire  1 Z s $end
    $scope module h_e $end
     $var wire 32 j HALF_LEN [31:0] $end
     $var wire 32 f WORD_LENGTH [31:0] $end
     $var wire 16 . din [15:0] $end
     $var wire 32 , dout [31:0] $end
     $var wire  1 Z s $end
     $var wire  1 0 sign $end
    $upscope $end
    $scope module s_e $end
     $var wire 32 k BYTE_LEN [31:0] $end
     $var wire 32 f WORD_LENGTH [31:0] $end
     $var wire  8 / din [7:0] $end
     $var wire 32 - dout [31:0] $end
     $var wire  1 Z s $end
     $var wire  1 1 sign $end
    $upscope $end
   $upscope $end
   $scope module ram $end
    $var wire 32 f ADDRESS_LENGTH [31:0] $end
    $var wire 32 k WORD_LENGTH [31:0] $end
    $var wire 32 [ a [31:0] $end
    $var wire  1 S clk $end
    $var wire  8 b d0 [7:0] $end
    $var wire  8 c d1 [7:0] $end
    $var wire  8 d d2 [7:0] $end
    $var wire  8 e d3 [7:0] $end
    $var wire 32 2 offset_a [31:0] $end
    $var wire 32 & rd [31:0] $end
    $var wire  1 V sb $end
    $var wire  1 U sh $end
    $var wire  1 T sw $end
    $var wire 32 \ wd [31:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
0#
0$
b00000000000000000000000000000000 %
b00000000000000000000000000000000 &
b00000000000000000000000000000000 '
b000000000000000000000000000000000000000000000000000000000 (
0*
b000000000000000000000000 +
b00000000000000000000000000000000 ,
b00000000000000000000000000000000 -
b0000000000000000 .
b00000000 /
00
01
b00000000000000000000000000000000 2
b000000000000000000000000000000000000000000000000000000000 3
b000000000000000000000000000000000000000000000000000000000 5
b000000000000000000000000000000000000000000000000000000000 7
b000000000000000000000000000000000000000000000000000000000 9
b000000000000000000000000000000000000000000000000000000000 ;
b000000000000000000000000000000000000000000000000000000000 =
b000000000000000000000000000000000000000000000000000000000 ?
b000000000000000000000000000000000000000000000000000000000 A
b000000000000000000000000000000000000000000000000000000000 C
b000000000000000000000000000000000000000000000000000000000 E
b000000000000000000000000000000000000000000000000000000000 G
b000000000000000000000000000000000000000000000000000000000 I
b000000000000000000000000000000000000000000000000000000000 K
b000000000000000000000000000000000000000000000000000000000 M
b000000000000000000000000000000000000000000000000000000000 O
b000000000000000000000000000000000000000000000000000000000 Q
1S
0T
0U
0V
0W
0X
0Y
0Z
b00000000000000000000000000000000 [
b00000000000000000000000000000000 \
b00000000000000000000000000000000 ]
0^
0_
b00000000000000000000000000000000 `
b00000000000000000000000000000000 a
b00000000 b
b00000000 c
b00000000 d
b00000000 e
b00000000000000000000000000100000 f
b00000000000000000000000000000110 g
b00000000000000000000000000011000 h
b00000000000000000000000000111001 i
b00000000000000000000000000010000 j
b00000000000000000000000000001000 k
b00 l
#1
b00000000000000000000000000000001 2
0S
#2
1S
#3
0S
#4
1S
#5
0S
#6
1S
#7
0S
#8
1S
#9
0S
#10
1S
#11
0S
#12
1S
#13
0S
#14
1S
#15
0S
#16
1S
#17
0S
#18
1S
#19
0S
#20
1S
#21
0S
#22
1S
#23
0S
#24
1S
#25
0S
#26
1S
#27
0S
#28
1S
#29
0S
#30
1S
#31
0S
#32
1S
#33
0S
#34
1S
#35
0S
#36
1S
#37
0S
#38
1S
#39
0S
#40
1S
#41
0S
#42
1S
#43
0S
#44
1S
#45
0S
#46
1S
#47
0S
#48
1S
#49
0S
#50
1S
#51
0S
#52
1S
#53
0S
#54
1S
#55
0S
#56
1S
#57
0S
#58
1S
#59
0S
#60
1S
#61
0S
#62
1S
#63
0S
#64
1S
#65
0S
#66
1S
#67
0S
#68
1S
#69
0S
#70
1S
#71
0S
#72
1S
#73
0S
#74
1S
#75
0S
#76
1S
#77
0S
#78
1S
#79
0S
#80
1S
#81
0S
#82
1S
#83
0S
#84
1S
#85
0S
#86
1S
#87
0S
#88
1S
#89
0S
#90
1S
#91
0S
#92
1S
#93
0S
#94
1S
#95
0S
#96
1S
#97
0S
#98
1S
#99
0S
#100
1S
#101
0S
#102
1S
#103
0S
#104
1S
#105
0S
#106
1S
#107
0S
#108
1S
#109
0S
#110
1S
#111
0S
#112
1S
#113
0S
#114
1S
#115
0S
#116
1S
#117
0S
#118
1S
#119
0S
#120
1S
#121
0S
#122
1S
#123
0S
#124
1S
#125
0S
#126
1S
#127
0S
#128
1S
#129
0S
#130
1S
#131
0S
#132
1S
#133
0S
#134
1S
#135
0S
#136
1S
#137
0S
#138
1S
#139
0S
#140
1S
#141
0S
#142
1S
#143
0S
#144
1S
#145
0S
#146
1S
#147
0S
#148
1S
#149
0S
#150
1S
#151
0S
#152
1S
#153
0S
#154
1S
#155
0S
#156
1S
#157
0S
#158
1S
#159
0S
#160
1S
#161
0S
#162
1S
#163
0S
#164
1S
#165
0S
#166
1S
#167
0S
#168
1S
#169
0S
#170
1S
#171
0S
#172
1S
#173
0S
#174
1S
#175
0S
#176
1S
#177
0S
#178
1S
#179
0S
#180
1S
#181
0S
#182
1S
#183
0S
#184
1S
#185
0S
#186
1S
#187
0S
#188
1S
#189
0S
#190
1S
#191
0S
#192
1S
#193
0S
#194
1S
#195
0S
#196
1S
#197
0S
#198
1S
#199
0S
