$version Generated by VerilatedVcd $end
$date Fri Dec 16 19:14:14 2022 $end
$timescale 1ps $end

 $scope module TOP $end
  $var wire 32 m ALUResult_M [31:0] $end
  $var wire  1 e clk $end
  $var wire  1 k lb $end
  $var wire  1 j lh $end
  $var wire  1 i lw $end
  $var wire 32 o readData_M [31:0] $end
  $var wire  1 l s $end
  $var wire  1 h sb $end
  $var wire  1 g sh $end
  $var wire  1 f sw $end
  $var wire 32 n writeData_M [31:0] $end
  $scope module top_memory $end
   $var wire 32 m ALUResult_M [31:0] $end
   $var wire 32 s WIDTH [31:0] $end
   $var wire 32 H cache_addr_out [31:0] $end
   $var wire  1 F cache_evict $end
   $var wire  1 E cache_hit $end
   $var wire 32 G cache_out [31:0] $end
   $var wire 32 p cache_store [31:0] $end
   $var wire  1 e clk $end
   $var wire  1 k lb $end
   $var wire  1 j lh $end
   $var wire  1 C loadIns $end
   $var wire  1 i lw $end
   $var wire 32 J memory_out [31:0] $end
   $var wire 32 I ram_out [31:0] $end
   $var wire 32 o readData_M [31:0] $end
   $var wire  1 l s $end
   $var wire  1 h sb $end
   $var wire  1 g sh $end
   $var wire  1 D storeIns $end
   $var wire  1 f sw $end
   $var wire 32 n writeData_M [31:0] $end
   $scope module cache $end
    $var wire 32 v CACHE_DATA_WIDTH [31:0] $end
    $var wire 32 s DATA_WIDTH [31:0] $end
    $var wire  1 # LRU_array[0] $end
    $var wire  1 - LRU_array[10] $end
    $var wire  1 . LRU_array[11] $end
    $var wire  1 / LRU_array[12] $end
    $var wire  1 0 LRU_array[13] $end
    $var wire  1 1 LRU_array[14] $end
    $var wire  1 2 LRU_array[15] $end
    $var wire  1 3 LRU_array[16] $end
    $var wire  1 4 LRU_array[17] $end
    $var wire  1 5 LRU_array[18] $end
    $var wire  1 6 LRU_array[19] $end
    $var wire  1 $ LRU_array[1] $end
    $var wire  1 7 LRU_array[20] $end
    $var wire  1 8 LRU_array[21] $end
    $var wire  1 9 LRU_array[22] $end
    $var wire  1 : LRU_array[23] $end
    $var wire  1 ; LRU_array[24] $end
    $var wire  1 < LRU_array[25] $end
    $var wire  1 = LRU_array[26] $end
    $var wire  1 > LRU_array[27] $end
    $var wire  1 ? LRU_array[28] $end
    $var wire  1 @ LRU_array[29] $end
    $var wire  1 % LRU_array[2] $end
    $var wire  1 A LRU_array[30] $end
    $var wire  1 B LRU_array[31] $end
    $var wire  1 & LRU_array[3] $end
    $var wire  1 ' LRU_array[4] $end
    $var wire  1 ( LRU_array[5] $end
    $var wire  1 ) LRU_array[6] $end
    $var wire  1 * LRU_array[7] $end
    $var wire  1 + LRU_array[8] $end
    $var wire  1 , LRU_array[9] $end
    $var wire 32 t SET_WIDTH [31:0] $end
    $var wire 32 u TAG_WIDTH [31:0] $end
    $var wire 32 m addr_in [31:0] $end
    $var wire 32 H addr_out [31:0] $end
    $var wire 59 O cache_out [58:0] $end
    $var wire 59 K cache_out1 [58:0] $end
    $var wire 59 M cache_out2 [58:0] $end
    $var wire 32 p cache_store [31:0] $end
    $var wire  1 e clk $end
    $var wire 32 Z din [31:0] $end
    $var wire  1 W dirty_bit $end
    $var wire 32 G dout [31:0] $end
    $var wire  1 F evict $end
    $var wire  1 E hit $end
    $var wire  1 C loadIns $end
    $var wire  1 U matching_tag $end
    $var wire 32 I ram_out [31:0] $end
    $var wire  5 X set [4:0] $end
    $var wire  1 D storeIns $end
    $var wire 25 Y tag_in [24:0] $end
    $var wire 25 S tag_out [24:0] $end
    $var wire 25 Q tag_out1 [24:0] $end
    $var wire 25 R tag_out2 [24:0] $end
    $var wire  1 T target_way $end
    $var wire  1 V valid $end
   $upscope $end
   $scope module cache_store_input $end
    $var wire 32 s WIDTH [31:0] $end
    $var wire 32 m addr [31:0] $end
    $var wire 32 p cache_store [31:0] $end
    $var wire 32 n din [31:0] $end
    $var wire 32 J mem_out [31:0] $end
    $var wire  1 h sb $end
    $var wire  1 g sh $end
    $var wire  1 f sw $end
   $upscope $end
   $scope module hbw $end
    $var wire 32 x BYTE_LEN [31:0] $end
    $var wire 32 s CPU_WORD [31:0] $end
    $var wire 32 w HALF_LEN [31:0] $end
    $var wire  8 ^ b [7:0] $end
    $var wire 32 \ be [31:0] $end
    $var wire 32 J data [31:0] $end
    $var wire 32 o dout [31:0] $end
    $var wire 16 ] h [15:0] $end
    $var wire 32 [ he [31:0] $end
    $var wire  1 k lb $end
    $var wire  1 j lh $end
    $var wire  1 i lw $end
    $var wire  2 q offset [1:0] $end
    $var wire  1 l s $end
    $scope module h_e $end
     $var wire 32 w HALF_LEN [31:0] $end
     $var wire 32 s WORD_LENGTH [31:0] $end
     $var wire 16 ] din [15:0] $end
     $var wire 32 [ dout [31:0] $end
     $var wire  1 l s $end
     $var wire  1 _ sign $end
    $upscope $end
    $scope module s_e $end
     $var wire 32 x BYTE_LEN [31:0] $end
     $var wire 32 s WORD_LENGTH [31:0] $end
     $var wire  8 ^ din [7:0] $end
     $var wire 32 \ dout [31:0] $end
     $var wire  1 l s $end
     $var wire  1 ` sign $end
    $upscope $end
   $upscope $end
   $scope module ram $end
    $var wire 32 s ADDRESS_LENGTH [31:0] $end
    $var wire 32 x WORD_LENGTH [31:0] $end
    $var wire  1 e clk $end
    $var wire  8 a d0 [7:0] $end
    $var wire  8 b d1 [7:0] $end
    $var wire  8 c d2 [7:0] $end
    $var wire  8 d d3 [7:0] $end
    $var wire 32 r offset_ra [31:0] $end
    $var wire 32 m r_a [31:0] $end
    $var wire 32 I rd [31:0] $end
    $var wire  1 y sb $end
    $var wire  1 y sh $end
    $var wire  1 F sw $end
    $var wire 32 H w_a [31:0] $end
    $var wire 32 G wd [31:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
0#
0$
0%
0&
0'
0(
0)
0*
0+
0,
0-
0.
0/
00
01
02
03
04
05
06
07
08
09
0:
0;
0<
0=
0>
0?
0@
0A
0B
0C
0D
0E
0F
b00000000000000000000000000000000 G
b00000000000000000000000000000000 H
b00000000000000000000000000000000 I
b00000000000000000000000000000000 J
b00000000000000000000000000000000000000000000000000000000000 K
b00000000000000000000000000000000000000000000000000000000000 M
b00000000000000000000000000000000000000000000000000000000000 O
b0000000000000000000000000 Q
b0000000000000000000000000 R
b0000000000000000000000000 S
0T
0U
0V
0W
b00000 X
b0000000000000000000000000 Y
b00000000000000000000000000000000 Z
b00000000000000000000000000000000 [
b00000000000000000000000000000000 \
b0000000000000000 ]
b00000000 ^
0_
0`
b00000000 a
b00000000 b
b00000000 c
b00000000 d
1e
0f
0g
0h
0i
0j
0k
0l
b00000000000000000000000000000000 m
b00000000000000000000000000000000 n
b00000000000000000000000000000000 o
b00000000000000000000000000000000 p
b00 q
b00000000000000000000000000000000 r
b00000000000000000000000000100000 s
b00000000000000000000000000000101 t
b00000000000000000000000000011001 u
b00000000000000000000000000111011 v
b00000000000000000000000000010000 w
b00000000000000000000000000001000 x
0y
#1
1U
0e
#2
1e
#3
0e
#4
1e
#5
0e
#6
1e
#7
0e
#8
1e
#9
0e
#10
1e
#11
0e
#12
1e
#13
0e
#14
1e
#15
0e
#16
1e
#17
0e
#18
1e
#19
0e
#20
1e
#21
0e
#22
1e
#23
0e
#24
1e
#25
0e
#26
1e
#27
0e
#28
1e
#29
0e
#30
1e
#31
0e
#32
1e
#33
0e
#34
1e
#35
0e
#36
1e
#37
0e
#38
1e
#39
0e
#40
1e
#41
0e
#42
1e
#43
0e
#44
1e
#45
0e
#46
1e
#47
0e
#48
1e
#49
0e
#50
1e
#51
0e
#52
1e
#53
0e
#54
1e
#55
0e
#56
1e
#57
0e
#58
1e
#59
0e
#60
1e
#61
0e
#62
1e
#63
0e
#64
1e
#65
0e
#66
1e
#67
0e
#68
1e
#69
0e
#70
1e
#71
0e
#72
1e
#73
0e
#74
1e
#75
0e
#76
1e
#77
0e
#78
1e
#79
0e
#80
1e
#81
0e
#82
1e
#83
0e
#84
1e
#85
0e
#86
1e
#87
0e
#88
1e
#89
0e
#90
1e
#91
0e
#92
1e
#93
0e
#94
1e
#95
0e
#96
1e
#97
0e
#98
1e
#99
0e
#100
1e
#101
0e
#102
1e
#103
0e
#104
1e
#105
0e
#106
1e
#107
0e
#108
1e
#109
0e
#110
1e
#111
0e
#112
1e
#113
0e
#114
1e
#115
0e
#116
1e
#117
0e
#118
1e
#119
0e
#120
1e
#121
0e
#122
1e
#123
0e
#124
1e
#125
0e
#126
1e
#127
0e
#128
1e
#129
0e
#130
1e
#131
0e
#132
1e
#133
0e
#134
1e
#135
0e
#136
1e
#137
0e
#138
1e
#139
0e
#140
1e
#141
0e
#142
1e
#143
0e
#144
1e
#145
0e
#146
1e
#147
0e
#148
1e
#149
0e
#150
1e
#151
0e
#152
1e
#153
0e
#154
1e
#155
0e
#156
1e
#157
0e
#158
1e
#159
0e
#160
1e
#161
0e
#162
1e
#163
0e
#164
1e
#165
0e
#166
1e
#167
0e
#168
1e
#169
0e
#170
1e
#171
0e
#172
1e
#173
0e
#174
1e
#175
0e
#176
1e
#177
0e
#178
1e
#179
0e
#180
1e
#181
0e
#182
1e
#183
0e
#184
1e
#185
0e
#186
1e
#187
0e
#188
1e
#189
0e
#190
1e
#191
0e
#192
1e
#193
0e
#194
1e
#195
0e
#196
1e
#197
0e
#198
1e
#199
0e
